diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index 9efeed7..b943038 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -154,7 +154,9 @@ GuiMenu::GuiMenu(Window *window, bool animate) : GuiComponent(window), mMenu(win
 
 		if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::WIFI)) {
 			addEntry(_("NETWORK SETTINGS").c_str(), true, [this] { openNetworkSettings_batocera(); }, "iconNetwork");
-		  addEntry(_("MOONLIGHT GAME STREAMING").c_str(), true, [this] { GuiMoonlight::show(mWindow); }, "iconGames");
+		  	if (SystemConf::getInstance()->get("global.showMOONLIGHT") == "1") {
+		  		addEntry(_("MOONLIGHT GAME STREAMING").c_str(), true, [this] { GuiMoonlight::show(mWindow); }, "iconGames");
+			}
 		}
 #else
 		if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::GAMESETTINGS))
@@ -303,6 +305,17 @@ void GuiMenu::openEmuELECSettings()
                 SystemConf::getInstance()->set("global.showFPS", fpsenabled ? "1" : "0");
 				SystemConf::getInstance()->saveSystemConf();
 			});
+ 
+       auto moonlight_enabled = std::make_shared<SwitchComponent>(mWindow);
+		bool moonlightenabled = SystemConf::getInstance()->get("global.showMOONLIGHT") == "1";
+		moonlight_enabled->setState(moonlightenabled);
+		s->addWithLabel(_("SHOW MOONLIGHT GAME STREAMING"), moonlight_enabled);
+		s->addSaveFunc([moonlight_enabled] {
+			bool moonlightenabled = moonlight_enabled->getState();
+                SystemConf::getInstance()->set("global.showMOONLIGHT", moonlightenabled ? "1" : "0");
+				SystemConf::getInstance()->saveSystemConf();
+			});
+
 /*
        auto bezels_enabled = std::make_shared<SwitchComponent>(mWindow);
 		bool bezelsEnabled = SystemConf::getInstance()->get("global.bezel") == "1";
@@ -399,7 +412,7 @@ void GuiMenu::openDangerZone(Window* mWindow, std::string configName)
 	GuiSettings* dangerZone = new GuiSettings(mWindow, _("DANGER ZONE").c_str());
 
     dangerZone->addEntry(_("BACKUP CONFIGURATIONS"), true, [mWindow] {
-    mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING THIS WILL RESTART EMULATIONSTATION!\n\nAFTER THE SCRIPT IS DONE REMEMBER TO COPY THE FILE /storage/roms/backup/JELOS_BACKUP.zip TO SOME PLACE SAFE OR IT WILL BE DELETED ON NEXT REBOOT!\n\nBACKUP CURRENT CONFIG AND RESTART?"), _("YES"),
+    mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING THIS WILL RESTART EMULATIONSTATION!\n\nAFTER THE SCRIPT IS DONE REMEMBER TO COPY THE FILE /storage/roms/backup/ENVIOS_BACKUP.zip TO SOME PLACE SAFE OR IT WILL BE DELETED ON NEXT REBOOT!\n\nBACKUP CURRENT CONFIG AND RESTART?"), _("YES"),
 				[] {
 				runSystemCommand("/usr/bin/run \"/usr/bin/backuptool backup\"", "", nullptr);
 				}, _("NO"), nullptr));
@@ -1322,7 +1335,7 @@ void GuiMenu::openSystemSettings_batocera()
 	s->addSaveFunc([this, optionsOCProfile, selectedOCProfile]
 	{
 		if (optionsOCProfile->changed()) {
-			mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING: OVERCLOCKING YOUR DEVICE MAY RESULT IN STABILITY PROBLEMS OR CAUSE HARDWARE DAMAGE!\n\nUSING THE QUIET COOLING PROFILE WHILE USING CERTAIN OVERCLOCKS MAY CAUSE PANIC REBOOTS!\n\nJELOS IS NOT RESPONSIBLE FOR ANY DAMAGE THAT MAY OCCUR USING THESE SETTINGS!\n\nCLICK YES THAT YOU AGREE, OR NO TO CANCEL."), _("YES"),
+			mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING: OVERCLOCKING YOUR DEVICE MAY RESULT IN STABILITY PROBLEMS OR CAUSE HARDWARE DAMAGE!\n\nUSING THE QUIET COOLING PROFILE WHILE USING CERTAIN OVERCLOCKS MAY CAUSE PANIC REBOOTS!\n\nENVIOS IS NOT RESPONSIBLE FOR ANY DAMAGE THAT MAY OCCUR USING THESE SETTINGS!\n\nCLICK YES THAT YOU AGREE, OR NO TO CANCEL."), _("YES"),
                                 [this,optionsOCProfile] {
 					SystemConf::getInstance()->set("system.overclock", optionsOCProfile->getSelected());
 					SystemConf::getInstance()->saveSystemConf();
@@ -3641,6 +3654,16 @@ void GuiMenu::openUISettings()
 	SystemConf::getInstance()->set("global.showFPS", fpsenabled ? "1" : "0");
 			SystemConf::getInstance()->saveSystemConf();
 		});
+ 
+	auto moonlight_enabled = std::make_shared<SwitchComponent>(mWindow);
+	bool moonlightenabled = SystemConf::getInstance()->get("global.showMOONLIGHT") == "1";
+	moonlight_enabled->setState(moonlightenabled);
+	s->addWithLabel(_("SHOW MOONLIGHT GAME STREAMING"), moonlight_enabled);
+	s->addSaveFunc([moonlight_enabled] {
+		bool moonlightenabled = moonlight_enabled->getState();
+		SystemConf::getInstance()->set("global.showMOONLIGHT", moonlightenabled ? "1" : "0");
+		SystemConf::getInstance()->saveSystemConf();
+	});
 
 #if defined(handheld)
 	auto desktop_enabled = std::make_shared<SwitchComponent>(mWindow);
@@ -4670,7 +4693,7 @@ void GuiMenu::popSpecificConfigurationGui(Window* mWindow, std::string title, st
         systemConfiguration->addSaveFunc([optionsOCProfile, selectedOCProfile, configName, mWindow]
         {
                 if (optionsOCProfile->changed()) {
-                        mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING: OVERCLOCKING YOUR DEVICE MAY RESULT IN STABILITY PROBLEMS OR CAUSE HARDWARE DAMAGE!\n\nUSING THE QUIET COOLING PROFILE WHILE USING CERTAIN OVERCLOCKS MAY CAUSE PANIC REBOOTS!\n\nJELOS IS NOT RESPONSIBLE FOR ANY DAMAGE THAT MAY OCCUR USING THESE SETTINGS!\n\nCLICK YES THAT YOU AGREE, OR NO TO CANCEL."), _("YES"),
+                        mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING: OVERCLOCKING YOUR DEVICE MAY RESULT IN STABILITY PROBLEMS OR CAUSE HARDWARE DAMAGE!\n\nUSING THE QUIET COOLING PROFILE WHILE USING CERTAIN OVERCLOCKS MAY CAUSE PANIC REBOOTS!\n\nENVIOS IS NOT RESPONSIBLE FOR ANY DAMAGE THAT MAY OCCUR USING THESE SETTINGS!\n\nCLICK YES THAT YOU AGREE, OR NO TO CANCEL."), _("YES"),
 			[optionsOCProfile,configName] {
                                 SystemConf::getInstance()->set(configName + ".overclock", optionsOCProfile->getSelected());
                                 SystemConf::getInstance()->saveSystemConf();
